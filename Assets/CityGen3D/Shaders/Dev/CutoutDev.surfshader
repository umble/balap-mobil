// double-sided cutout surface shader for things like wire fences
BEGIN_OPTIONS
   ShaderName "CityGen3D/CutoutDev"
   Stackable "False"
   Queue "Transparent"
   Alpha "Blend"
END_OPTIONS


BEGIN_PASS("All")
    Cull Off // double sided
END_PASS


BEGIN_PROPERTIES
   _MainTex("Albedo", 2D) = "white" {}
	_Color ("Color", Color) = (1, 1, 1, 1)
   
   [Normal][NoScaleOffset]_NormalMap("Normal", 2D) = "bump" {}
   _NormalScale("Normal Scale", Range(0,2)) = 1

   _Cutoff("Alpha Cutoff", Range(0,1)) = 0.5
   _CullFarStart("CullFarStart", Range( 0 , 10000)) = 32
   _CullFarDistance("CullFarDistance", Range( 0 , 10000)) = 256 
   
   [Toggle(_MASKMAP)] _UseMaskMap ("Use Mask Map", Float) = 0
   [ShowIfDrawer(_UseMaskMap)] [NoScaleOffset]_MaskMap("Mask Map", 2D) = "black" {}

   [Toggle(_EMISSION)] _UseEmission ("Use Emission Map", Float) = 0
   [ShowIfDrawer(_UseEmission)][NoScaleOffset]_EmissionMap("Emission Map", 2D) = "black" {}
   [ShowIfDrawer(_UseEmission)]_EmissionScale("Emission Scale", Range(0, 4)) = 1

   [Toggle(_DETAIL)] _UseDetail("Use Detail Map", Float) = 0
   [ShowIfDrawer(_UseDetail)] _DetailMap("Detail Map", 2D) = "bump" {}
   [ShowIfDrawer(_UseDetail)] _DetailAlbedoScale("Detail Albedo Scale", Range(0, 2)) = 1
   [ShowIfDrawer(_UseDetail)] _DetailNormalScale("Detail Normal Scale", Range(0, 2)) = 1
   [ShowIfDrawer(_UseDetail)] _DetailSmoothnessScale("Detail Smoothness Scale", Range(0, 2)) = 1

END_PROPERTIES


BEGIN_CBUFFER
	half4 _Color;
   float4 _MainTex_ST;
   float4 _DetailMap_ST;
   half _NormalScale;
   half _Cutoff;
   uniform half _CullFarStart;
   uniform half _CullFarDistance;
   half _EmissionScale;
   half _DetailAlbedoScale;
   half _DetailNormalScale;
   half _DetailSmoothnessScale;
END_CBUFFER


BEGIN_DEFINES
   #pragma shader_feature_local _ _MASKMAP
   #pragma shader_feature_local _ _DETAIL
   #pragma shader_feature_local _ _EMISSION
END_DEFINES


BEGIN_CODE

   half3 LitBlendDetailNormal(half3 n1, half3 n2)
   {
      return normalize(half3(n1.xy + n2.xy, n1.z*n2.z));
   }

   TEXTURE2D(_MainTex);
   SAMPLER(sampler_MainTex);
   TEXTURE2D(_NormalMap);
   TEXTURE2D(_MaskMap);
   TEXTURE2D(_EmissionMap);
   TEXTURE2D(_DetailMap);

	void SurfaceFunction(inout Surface o, ShaderData d)
	{
      float2 uv = d.texcoord0.xy * _MainTex_ST.xy + _MainTex_ST.zw;

      half4 c = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, uv);
      o.Albedo = c.rgb * _Color.rgb;
      o.Height = c.a;
      o.Normal = UnpackScaleNormal(SAMPLE_TEXTURE2D(_NormalMap, sampler_MainTex, uv), _NormalScale);

      half detailMask = 1;
      #if _MASKMAP
          // Unity mask map format (R) Metallic, (G) Occlusion, (B) Detail Mask (A) Smoothness
         half4 mask = SAMPLE_TEXTURE2D(_MaskMap, sampler_MainTex, uv);
         o.Metallic = mask.r;
         o.Occlusion = mask.g;
         o.Smoothness = mask.a;
         detailMask = mask.b;
      #endif // separate maps

      half3 emission = 0;
      #if defined(_EMISSION)
         o.Emission = SAMPLE_TEXTURE2D(_EmissionMap, sampler_MainTex, uv).rgb * _EmissionScale;
      #endif

      #if defined(_DETAIL)
         float2 detailUV = uv * _DetailMap_ST.xy + _DetailMap_ST.zw;
         half4 detailSample = SAMPLE_TEXTURE2D(_DetailMap, sampler_MainTex, detailUV);
         o.Normal = LitBlendDetailNormal(o.Normal, UnpackScaleNormal(detailSample, _DetailNormalScale * detailMask));
         o.Albedo = lerp(o.Albedo, o.Albedo * 2 * detailSample.x,  detailMask * _DetailAlbedoScale);
         o.Smoothness = lerp(o.Smoothness, o.Smoothness * 2 * detailSample.z, detailMask * _DetailSmoothnessScale);
      #endif
	  
		o.Alpha = c.a * _Color.a;
		
		// apply cutoff but reduce cutoff between _CullFarStart and _CullFarDistance so object doesn't fade away too quickly
	    clip( o.Alpha - ( ( 1.0 - saturate( ( ( distance( d.worldSpacePosition, _WorldSpaceCameraPos ) - _CullFarStart ) / _CullFarDistance ) ) ) * _Cutoff ) );
	}

END_CODE

